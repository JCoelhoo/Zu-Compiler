// $Id: type_checker.cpp,v 1.8 2016/05/07 21:12:17 ist178572 Exp $ -*- c++ -*-
#include <string>
#include "targets/type_checker.h"
#include "ast/all.h"  // automatically generated
#include <vector>
#include <algorithm>
#define ASSERT_UNSPEC \
    { if (node->type() != nullptr && \
          node->type()->name() != basic_type::TYPE_UNSPEC) return; }
typedef unsigned long int type;
//---------------------------------------------------------------------------

void zu::type_checker::do_integer_node(cdk::integer_node * const node, int lvl) {
  ASSERT_UNSPEC;
  node->type(new basic_type(4, basic_type::TYPE_INT));
}

void zu::type_checker::do_double_node(cdk::double_node * const node, int lvl) {
  ASSERT_UNSPEC;
  node->type(new basic_type(8, basic_type::TYPE_DOUBLE));
}

void zu::type_checker::do_string_node(cdk::string_node * const node, int lvl) {
  ASSERT_UNSPEC;
  node->type(new basic_type(4, basic_type::TYPE_STRING));
}

//---------------------------------------------------------------------------

inline void zu::type_checker::processUnaryExpression(cdk::unary_expression_node * const node, int lvl) {
  node->argument()->accept(this, lvl + 2);
  if (node->argument()->type()->name() != basic_type::TYPE_INT)
    throw std::string("wrong type in argument of unary expression");

  // in Zu, expressions aren't always int
  node->type(new basic_type(4, basic_type::TYPE_INT));
}

void zu::type_checker::do_neg_node(cdk::neg_node * const node, int lvl) {
  processUnaryExpression(node, lvl);
}

//---------------------------------------------------------------------------


/* MULT | DIV | GE | GT | LE | LT*/
inline void zu::type_checker::processBinaryExpressionIntDouble(cdk::binary_expression_node * const node, int lvl) {
  ASSERT_UNSPEC;
  
  node->right()->accept(this, lvl + 2);
  if (node->right()->type()->name() == basic_type::TYPE_INT || node->right()->type()->name() == basic_type::TYPE_DOUBLE){
    throw std::string("wrong type in right argument of binary expression");
  }

  node->left()->accept(this, lvl + 2);
  if (node->left()->type()->name() == basic_type::TYPE_INT || node->left()->type()->name() == basic_type::TYPE_DOUBLE){
    throw std::string("wrong type in left argument of binary expression");
  }

//podem multiplicar-se e dividir se os tipos forem diferentes
  node->type(new basic_type(node->right()->type()->size(), node->right()->type()->name()));
}

/*ADD | EQ | NE*/
inline void zu::type_checker::processBinaryExpressionAdd(cdk::binary_expression_node * const node, int lvl) {
  ASSERT_UNSPEC;
  
  node->left()->accept(this, lvl + 2);
  node->right()->accept(this, lvl + 2);

  if(node->left()->type()->name() == basic_type::TYPE_POINTER){
    if (node->right()->type()->name() != basic_type::TYPE_INT){
        throw std::string("wrong type in binary expression");
    }
    node->type(new basic_type(4, basic_type::TYPE_POINTER)); return;

  }else if(node->right()->type()->name() == basic_type::TYPE_POINTER){
    if (node->left()->type()->name() != basic_type::TYPE_INT){
        throw std::string("wrong type in binary expression");
    }
    node->type(new basic_type(4, basic_type::TYPE_POINTER)); return;
  }

  
  if (node->left()->type()->name() != basic_type::TYPE_INT || node->left()->type()->name() != basic_type::TYPE_DOUBLE ){
    throw std::string("wrong type in left argument of binary expression");
  }
  if (node->right()->type()->name() != basic_type::TYPE_INT || node->right()->type()->name() != basic_type::TYPE_DOUBLE ){
    throw std::string("wrong type in right argument of binary expression");
  }

  if ( node->left()->type()->name()!= node->right()->type()->name()){
        throw std::string("types do not match in binary expression");
  }

  node->type(new basic_type(node->right()->type()->size(), node->right()->type()->name()));
}
/*SUB*/
inline void zu::type_checker::processBinaryExpressionSub(cdk::binary_expression_node * const node, int lvl) {
  ASSERT_UNSPEC;
  
  node->left()->accept(this, lvl + 2);
  node->right()->accept(this, lvl + 2);

  if (node->left()->type()->name() != basic_type::TYPE_INT || node->left()->type()->name() != basic_type::TYPE_DOUBLE || node->left()->type()->name() != basic_type::TYPE_POINTER){
    throw std::string("wrong type in left argument of binary expression");
  }
  if (node->right()->type()->name() != basic_type::TYPE_INT || node->right()->type()->name() != basic_type::TYPE_DOUBLE || node->right()->type()->name() != basic_type::TYPE_POINTER){
    throw std::string("wrong type in right argument of binary expression");
  }

  if(node->left()->type()->name() == basic_type::TYPE_POINTER && node->right()->type()->name() == basic_type::TYPE_POINTER ){
    if(node->left()->type()->subtype() != node->left()->type()->subtype()){
      throw std::string("pointers with different types in binary expression");
    } 
    node->type()->_subtype = node->left()->type()->subtype();
  } else if ( node->left()->type()->name()== basic_type::TYPE_POINTER && node->right()->type()->name()!= basic_type::TYPE_INT ){
    throw std::string("types do not match in binary expression");
  } else if ( node->right()->type()->name()== basic_type::TYPE_POINTER && node->left()->type()->name()!= basic_type::TYPE_INT ){
    throw std::string("types do not match in binary expression");
  }
  node->type(new basic_type(node->right()->type()->size(), node->right()->type()->name()));
}

/*MOD | AND | OR | NOT*/
inline void zu::type_checker::processBinaryExpressionInt(cdk::binary_expression_node * const node, int lvl) {
  ASSERT_UNSPEC;
  node->left()->accept(this, lvl + 2);
  if (node->left()->type()->name() != basic_type::TYPE_INT)
    throw std::string("wrong type in left argument of binary expression");

  node->right()->accept(this, lvl + 2);
  if (node->right()->type()->name() != basic_type::TYPE_INT)
    throw std::string("wrong type in right argument of binary expression");

  // in Zu, expressions are always int
  node->type(new basic_type(4, basic_type::TYPE_INT));
}


void zu::type_checker::do_add_node(cdk::add_node * const node, int lvl) {
  processBinaryExpressionAdd(node, lvl);
}
void zu::type_checker::do_sub_node(cdk::sub_node * const node, int lvl) {
  processBinaryExpressionSub(node, lvl);
}
void zu::type_checker::do_mul_node(cdk::mul_node * const node, int lvl) {
  processBinaryExpressionIntDouble(node, lvl);
}
void zu::type_checker::do_div_node(cdk::div_node * const node, int lvl) {
  processBinaryExpressionIntDouble(node, lvl);
}
void zu::type_checker::do_mod_node(cdk::mod_node * const node, int lvl) {
  processBinaryExpressionInt(node, lvl);
}
void zu::type_checker::do_lt_node(cdk::lt_node * const node, int lvl) {
  processBinaryExpressionIntDouble(node, lvl);
}
void zu::type_checker::do_le_node(cdk::le_node * const node, int lvl) {
  processBinaryExpressionIntDouble(node, lvl);
}
void zu::type_checker::do_ge_node(cdk::ge_node * const node, int lvl) {
  processBinaryExpressionIntDouble(node, lvl);
}
void zu::type_checker::do_gt_node(cdk::gt_node * const node, int lvl) {
  processBinaryExpressionIntDouble(node, lvl);
}
void zu::type_checker::do_ne_node(cdk::ne_node * const node, int lvl) {
  processBinaryExpressionAdd(node, lvl);
}
void zu::type_checker::do_eq_node(cdk::eq_node * const node, int lvl) {
  processBinaryExpressionAdd(node, lvl);
}

//---------------------------------------------------------------------------

void zu::type_checker::do_rvalue_node(zu::rvalue_node * const node, int lvl) {
  node->lvalue()->accept(this, lvl);
  node->type(node->lvalue()->type());
}

//---------------------------------------------------------------------------

void zu::type_checker::do_lvalue_node(zu::lvalue_node * const node, int lvl) {
  /*FIXME const std::string &id = node->value();
  std::shared_ptr<zu::symbol> symbol = _symtab.find(id);
  if (symbol == nullptr) throw id + " undeclared";
  // hackish stuff...
  node->type(new basic_type(4, basic_type::TYPE_INT));*/
}

//---------------------------------------------------------------------------

void zu::type_checker::do_assignment_node(zu::assignment_node * const node, int lvl) {
  ASSERT_UNSPEC;
  //FIXME
  /*node->lvalue()->accept(this, lvl+4);
  node->rvalue()->accept(this, lvl+4);
  std::string id = *(node->lvalue()->name());
  if (!_symtab.find(id)) {
    throw std::string("undeclared lvalue");
  }
  if (node->lvalue()->type()->name() != node->rvalue()->type()->name())
    throw std::string("wrong types in assignment");
  node->type(node->lvalue()->type());*/

}

//---------------------------------------------------------------------------

void zu::type_checker::do_evaluation_node(zu::evaluation_node * const node, int lvl) {
  node->argument()->accept(this, lvl + 2);
}

void zu::type_checker::do_print_node(zu::print_node * const node, int lvl) {
  node->argument()->accept(this, lvl + 2);
}

//---------------------------------------------------------------------------

void zu::type_checker::do_read_node(zu::read_node * const node, int lvl) {
  //node->argument()->accept(this, lvl + 2);
}

//---------------------------------------------------------------------------
//New
void zu::type_checker::do_for_node(zu::for_node * const node, int lvl) {
  node->init()->accept(this, lvl + 4);
  node->condition()->accept(this, lvl + 4);
  node->incr()->accept(this, lvl + 4);
  node->block()->accept(this, lvl + 4);
}

void zu::type_checker::do_and_node(zu::and_node * const node, int lvl) {
  processBinaryExpressionInt(node, lvl);
}

void zu::type_checker::do_or_node(zu::or_node * const node, int lvl) {
  processBinaryExpressionInt(node, lvl);
}

void zu::type_checker::do_not_node(zu::not_node * const node, int lvl) {
    processUnaryExpression(node, lvl);
}


void zu::type_checker::do_ret_node(zu::ret_node * const node, int lvl) {}
void zu::type_checker::do_cont_node(zu::cont_node * const node, int lvl) {}
void zu::type_checker::do_break_node(zu::break_node * const node, int lvl) {}
void zu::type_checker::do_function_call_node(zu::function_call_node * const node, int lvl) {}
void zu::type_checker::do_function_impl_node(zu::function_impl_node * const node, int lvl) {}
void zu::type_checker::do_function_dec_node(zu::function_dec_node * const node, int lvl) {}


void zu::type_checker::do_identifier_node(zu::identifier_node * const node, int lvl) {
  ASSERT_UNSPEC;
  std::string id = *(node->name());
  std::shared_ptr<symbol> symbol = _symtab.find(id);
  if (!symbol) throw id + " undeclared";
  node->type(symbol->type());

}


void zu::type_checker::do_declaration_node(zu::declaration_node * const node, int lvl) {
  ASSERT_UNSPEC;
  std::string id = *(node->identifier()->name());
  if (!_symtab.insert(id, std::make_shared<symbol>(node->type(), id, 0)))
    throw id + " redeclared";
 
  if (node->rvalue()!= nullptr) {
    node->rvalue()->accept(this, lvl+2);
    if (node->type()->name() != node->rvalue()->type()->name())
      throw std::string("wrong type for initializer");
  }

}

void zu::type_checker::do_identity_node(zu::identity_node * const node, int lvl) {}
void zu::type_checker::do_malloc_node(zu::malloc_node * const node, int lvl) {}
void zu::type_checker::do_address_node(zu::address_node * const node, int lvl) {}
void zu::type_checker::do_index_node(zu::index_node * const node, int lvl) {}
void zu::type_checker::do_block_node(zu::block_node * const node, int lvl) {}


//---------------------------------------------------------------------------

void zu::type_checker::do_if_node(zu::if_node * const node, int lvl) {
  node->condition()->accept(this, lvl + 4);
}

//FIXME VERIFIY
void zu::type_checker::do_if_else_node(zu::if_else_node * const node, int lvl) {
  /*node->condition()->accept(this, lvl + 4);
  node->thenblock()->accept(this, lvl + 4);
  node->elseblock()->accept(this, lvl + 4);*/
}
