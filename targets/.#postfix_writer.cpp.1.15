// $Id: postfix_writer.cpp,v 1.15 2016/05/14 21:15:41 ist177983 Exp $ -*- c++ -*-
#include <string>
#include <sstream>
#include <iostream>
#include "targets/type_checker.h"
#include "targets/postfix_writer.h"
#include "ast/all.h"  // all.h is automatically generated

//---------------------------------------------------------------------------
//     THIS IS THE VISITOR'S DEFINITION
//---------------------------------------------------------------------------


void zu::postfix_writer::do_sequence_node(cdk::sequence_node * const node, int lvl) {
  for (size_t i = 0; i < node->size(); i++) {
    node->node(i)->accept(this, lvl);
  }
}

//---------------------------------------------------------------------------

void zu::postfix_writer::do_integer_node(cdk::integer_node * const node, int lvl) {
  std::cout << node->value() << std::endl;
  _pf.INT(node->value()); // push an integer
}

void zu::postfix_writer::do_double_node(cdk::double_node * const node, int lvl) {
  int lbl = ++_lbl;
  _pf.RODATA();
  _pf.ALIGN();
  _pf.LABEL(mklbl(lbl));
  _pf.DOUBLE(node->value());
  _pf.TEXT();
  _pf.ADDR(mklbl(lbl));
  _pf.DLOAD();
  std::cout << node->value() << std::endl;
}

void zu::postfix_writer::do_string_node(cdk::string_node * const node, int lvl) {
  int lbl1;

  /* generate the string */
  _pf.RODATA(); // strings are DATA readonly
  _pf.ALIGN(); // make sure we are aligned
  _pf.LABEL(mklbl(lbl1 = ++_lbl)); // give the string a name
  _pf.STR(node->value()); // output string characters

  /* leave the address on the stack */
  _pf.TEXT(); // return to the TEXT segment
  _pf.ADDR(mklbl(lbl1)); // the string to be printed
}

//---------------------------------------------------------------------------

void zu::postfix_writer::do_neg_node(cdk::neg_node * const node, int lvl) {
  CHECK_TYPES(_compiler, _symtab, node);
  node->argument()->accept(this, lvl); // determine the value
  if(node->type()->name() == basic_type::TYPE_INT){
    _pf.NEG(); // 2-complement
  } 
  else if(node->type()->name() == basic_type::TYPE_DOUBLE){
    _pf.DNEG(); // 2-complement
  }
}

//---------------------------------------------------------------------------

void zu::postfix_writer::do_add_node(cdk::add_node * const node, int lvl) {
  CHECK_TYPES(_compiler, _symtab, node);
  node->left()->accept(this, lvl);
  if(node->type()->name() == basic_type::TYPE_POINTER || node->type()->name() == basic_type::TYPE_INT){
    node->right()->accept(this, lvl);
    _pf.ADD(); return;
  }

  if(node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.I2D();
  }
  node->right()->accept(this, lvl);
  if(node->right()->type()->name() == basic_type::TYPE_INT && node->left()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.I2D();
  }
  if(node->left()->type()->name() == basic_type::TYPE_DOUBLE || node->right()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.DADD();
  }

}
void zu::postfix_writer::do_sub_node(cdk::sub_node * const node, int lvl) {
  CHECK_TYPES(_compiler, _symtab, node);
    std::cout << "entered sub pf" << std::endl;

  node->left()->accept(this, lvl);
  if(node->type()->name() == basic_type::TYPE_INT){
    node->right()->accept(this, lvl);
    _pf.SUB(); return;
  }

  if(node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.I2D();
  }
  node->right()->accept(this, lvl);
  if(node->right()->type()->name() == basic_type::TYPE_INT && node->left()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.I2D();
  }
  if(node->left()->type()->name() == basic_type::TYPE_DOUBLE || node->right()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.DSUB();
  }else{
    _pf.SUB();
  }
}
void zu::postfix_writer::do_mul_node(cdk::mul_node * const node, int lvl) {
  CHECK_TYPES(_compiler, _symtab, node);
  node->left()->accept(this, lvl);
  if(node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.I2D();
  }
  node->right()->accept(this, lvl);
  if(node->right()->type()->name() == basic_type::TYPE_INT && node->left()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.I2D();
  }
  if(node->left()->type()->name() == basic_type::TYPE_DOUBLE || node->right()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.DMUL();
  }else{
    _pf.MUL();
  }
}
void zu::postfix_writer::do_div_node(cdk::div_node * const node, int lvl) {
  CHECK_TYPES(_compiler, _symtab, node);
  node->left()->accept(this, lvl);
  if(node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.I2D();
  }
  node->right()->accept(this, lvl);
  if(node->right()->type()->name() == basic_type::TYPE_INT && node->left()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.I2D();
  }
  if(node->left()->type()->name() == basic_type::TYPE_DOUBLE || node->right()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.DDIV();
  }else{
    _pf.DIV();
  }
}

void zu::postfix_writer::do_mod_node(cdk::mod_node * const node, int lvl) {
  CHECK_TYPES(_compiler, _symtab, node);
  node->left()->accept(this, lvl);
  node->right()->accept(this, lvl);
  _pf.MOD();
}

void zu::postfix_writer::do_lt_node(cdk::lt_node * const node, int lvl) {
  CHECK_TYPES(_compiler, _symtab, node);
  node->left()->accept(this, lvl);
    std::cout << "LT PF" << std::endl;

  if(node->type()->name() == basic_type::TYPE_INT){
    node->right()->accept(this, lvl);
    _pf.LT();
    return;
  }

  if(node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.I2D();
  }
  node->right()->accept(this, lvl);
  if(node->right()->type()->name() == basic_type::TYPE_INT && node->left()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.I2D();
  }

  _pf.DCMP();
  _pf.INT(0);
  _pf.LT();


}

void zu::postfix_writer::do_le_node(cdk::le_node * const node, int lvl) {
  CHECK_TYPES(_compiler, _symtab, node);
  node->left()->accept(this, lvl);
  
  if(node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_INT ){
    node->right()->accept(this, lvl);
    _pf.LE();
    return;
  }

  if(node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.I2D();
  }
  node->right()->accept(this, lvl);
  if(node->right()->type()->name() == basic_type::TYPE_INT && node->left()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.I2D();
  }
  _pf.DCMP();
  _pf.INT(0);
  _pf.LE();
}

void zu::postfix_writer::do_ge_node(cdk::ge_node * const node, int lvl) {
  CHECK_TYPES(_compiler, _symtab, node);
  node->left()->accept(this, lvl);
  
  if(node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_INT ){
    node->right()->accept(this, lvl);
    _pf.GE();
    return;
  }

  if(node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.I2D();
  }
  node->right()->accept(this, lvl);
  if(node->right()->type()->name() == basic_type::TYPE_INT && node->left()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.I2D();
  }
  _pf.DCMP();
  _pf.INT(0);
  _pf.GE();
}
void zu::postfix_writer::do_gt_node(cdk::gt_node * const node, int lvl) {
  CHECK_TYPES(_compiler, _symtab, node);
  node->left()->accept(this, lvl);
  
  if(node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_INT ){
    node->right()->accept(this, lvl);
    _pf.GT();
    return;
  }

  if(node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.I2D();
  }
  node->right()->accept(this, lvl);
  if(node->right()->type()->name() == basic_type::TYPE_INT && node->left()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.I2D();
  }
  _pf.DCMP();
  _pf.INT(0);
  _pf.GT();
}
void zu::postfix_writer::do_ne_node(cdk::ne_node * const node, int lvl) {
  CHECK_TYPES(_compiler, _symtab, node);
  node->left()->accept(this, lvl);
  
  if(node->type()->name() == basic_type::TYPE_INT || node->type()->name() == basic_type::TYPE_POINTER ){
    node->right()->accept(this, lvl);
    _pf.NE();
    return;
  }

  if(node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.I2D();
  }
  node->right()->accept(this, lvl);
  if(node->right()->type()->name() == basic_type::TYPE_INT && node->left()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.I2D();
  }
  _pf.DCMP();
  _pf.INT(0);
  _pf.NE();
}

void zu::postfix_writer::do_eq_node(cdk::eq_node * const node, int lvl) {
   CHECK_TYPES(_compiler, _symtab, node);
  node->left()->accept(this, lvl);
  
  if(node->type()->name() == basic_type::TYPE_INT || node->type()->name() == basic_type::TYPE_POINTER ){
    node->right()->accept(this, lvl);
    _pf.EQ();
    return;
  }

  if(node->left()->type()->name() == basic_type::TYPE_INT && node->right()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.I2D();
  }
  node->right()->accept(this, lvl);
  if(node->right()->type()->name() == basic_type::TYPE_INT && node->left()->type()->name() == basic_type::TYPE_DOUBLE ){
    _pf.I2D();
  }
  _pf.DCMP();
  _pf.INT(0);
  _pf.EQ();
}

//---------------------------------------------------------------------------

void zu::postfix_writer::do_rvalue_node(zu::rvalue_node * const node, int lvl) {
  CHECK_TYPES(_compiler, _symtab, node);
  node->lvalue()->accept(this, lvl);
  //_pf.LOAD(); //FIXME: depends on type size
}

//---------------------------------------------------------------------------

void zu::postfix_writer::do_lvalue_node(zu::lvalue_node * const node, int lvl) {
  CHECK_TYPES(_compiler, _symtab, node);
  // FIXME simplified generation: all variables are global
  //_pf.ADDR(node->value());
}

//---------------------------------------------------------------------------

void zu::postfix_writer::do_assignment_node(zu::assignment_node * const node, int lvl) {
  CHECK_TYPES(_compiler, _symtab, node);

  node->rvalue()->accept(this, lvl); // determine the new value
  _pf.DUP();

  std::string id = *((dynamic_cast<zu::identifier_node*>(node->lvalue()))->name());
  std::shared_ptr<zu::symbol> sym = _symtab.find_local(id);

  node->lvalue()->accept(this, lvl);

  if (node->type()->name() == basic_type::TYPE_DOUBLE){
    _pf.DSTORE();
  } else 
    _pf.STORE();


  //node->lvalue()->accept(this, lvl); // where to store the value
  //_pf.TRASH(4); //FIXME
}

void zu::postfix_writer::do_identifier_node(zu::identifier_node * const node, int lvl) {
  CHECK_TYPES(_compiler, _symtab, node);
  std::string id = *node->name();
  if (global){
    _pf.ADDR(id);
    if (node->type()->name() == basic_type::TYPE_DOUBLE) _pf.DLOAD();
    else _pf.LOAD();
  } else {
    std::shared_ptr<zu::symbol> symbol = _symtab.find_local(id);
    if (!symbol) {
      _pf.ADDR(id);
      if (node->type()->name() == basic_type::TYPE_DOUBLE) _pf.DLOAD();
      else _pf.LOAD();
    } else {
      std::shared_ptr<zu::symbol> symbol = _symtab.find(id);
      _pf.LOCV(-retOffset-symbol->offset());
    }
  }
}

//---------------------------------------------------------------------------

void zu::postfix_writer::do_function_impl_node(zu::function_impl_node * const node, int lvl) {
  // generate the main function (RTS mandates that its name be "_main")
  CHECK_TYPES(_compiler, _symtab, node);
  global = false;
  std::string name = "";
  if (node->retValue() != nullptr) retOffset= node->retType()->size();
  size_t argOffset =4; //FIXME stack.getSize()
  
  if (*node->identifier() == "zu") name = "_main";
  else if (*node->identifier() == "_main") name = "zu";
  else name = *node->identifier();
  name = '_'+name;

  _pf.TEXT();
  _pf.ALIGN();
  _pf.GLOBAL(name, _pf.FUNC());
  _pf.LABEL(name);
  _pf.ENTER(8 + retOffset);  //FIXME

  // end the main function
  if(node->retValue()!= nullptr){
    node->retValue()->accept(this, lvl+2);
    _pf.LOCA(-retOffset);
  }else{
    //FIXME
  }

  _symtab.push();
  node->block()->accept(this, lvl);
  _symtab.pop();

  //verify types
  _pf.LOCAL(-retOffset);
  if(node->retType()->name() == basic_type::TYPE_DOUBLE){
    _pf.DLOAD();
    _pf.DPOP();
  }
  else{
    _pf.LOAD();
    _pf.POP();
  } 

  _pf.LEAVE();
  _pf.RET();
  _symtab.pop();
  global = true;

  // these are just a few library function imports


}

//---------------------------------------------------------------------------

void zu::postfix_writer::do_evaluation_node(zu::evaluation_node * const node, int lvl) {
  CHECK_TYPES(_compiler, _symtab, node);
  node->argument()->accept(this, lvl); // determine the value
  if (node->argument()->type()->name() == basic_type::TYPE_INT) {
    _pf.TRASH(4); // delete the evaluated value
  } else if (node->argument()->type()->name() == basic_type::TYPE_STRING) {
    _pf.TRASH(4); // delete the evaluated value's address
  } else if (node->argument()->type()->name() == basic_type::TYPE_DOUBLE) {
    _pf.TRASH(8); // delete the evaluated value's address
  } 
  /*else {
    std::cerr << "ERROR: CANNOT HAPPEN!" << std::endl;
    exit(1);
  }*/
}

void zu::postfix_writer::do_print_node(zu::print_node * const node, int lvl) {
  CHECK_TYPES(_compiler, _symtab, node);
  node->argument()->accept(this, lvl); // determine the value to print
  std::cout << "PRINT TYPE is " << node->argument()->type()->name()<<std::endl;
  if (node->argument()->type()->name() == basic_type::TYPE_INT) {
    _pf.CALL("printi");
    _pf.TRASH(4); // delete the printed value
  }else if (node->argument()->type()->name() == basic_type::TYPE_DOUBLE) {
    std::cout << "printing double" << std::endl; 
    _pf.CALL("printd");
    _pf.TRASH(4); // delete the printed value FIXME
  }
  else if (node->argument()->type()->name() == basic_type::TYPE_STRING) {
    _pf.CALL("prints");
    _pf.TRASH(4); // delete the printed value's address
  }
  else {
    std::cerr << node->argument()->type()->name() <<"ERROR: CANNOT HAPPEN!" << std::endl;
    exit(1);
  }
  if(node->ln()){
    _pf.CALL("println"); // print a newline
    //_pf.TRASH(4);
  }
}

//---------------------------------------------------------------------------

void zu::postfix_writer::do_read_node(zu::read_node * const node, int lvl) {
  std::cout << "entered read pf\n";
  CHECK_TYPES(_compiler, _symtab, node);
  _pf.CALL("readi");
  _pf.PUSH();
}

//---------------------------------------------------------------------------
//New
void zu::postfix_writer::do_for_node(zu::for_node * const node, int lvl) {
  int test = ++_lbl, incrBreak = ++_lbl, incrCont = ++_lbl,endFor = ++_lbl;
  brk.push(incrBreak);
  cont.push(incrCont);

  node->init()->accept(this,lvl);
  _pf.LABEL(mklbl(test));
  node->condition()->accept(this,lvl);
  _pf.JZ(mklbl(endFor));
  node->block()->accept(this,lvl);
  node->incr()->accept(this,lvl);
  _pf.JMP(mklbl(test));
  _pf.LABEL(mklbl(incrCont)); //for cont
  node->incr()->accept(this,lvl);
  _pf.JMP(mklbl(test));
  _pf.LABEL(mklbl(incrBreak)); //for break
  node->incr()->accept(this,lvl);
  _pf.LABEL(mklbl(endFor));

  cont.pop();
  brk.pop();
}

void zu::postfix_writer::do_break_node(zu::break_node * const node, int lvl) {
  _pf.JMP(mklbl(brk.top()));
}

void zu::postfix_writer::do_cont_node(zu::cont_node * const node, int lvl) {
  _pf.JMP(mklbl(cont.top()));
}

void zu::postfix_writer::do_and_node(zu::and_node * const node, int lvl) {
  CHECK_TYPES(_compiler, _symtab, node);
  int lbl = ++_lbl;
  node->left()->accept(this, lvl);
  _pf.JZ(mklbl(lbl));
  node->right()->accept(this, lvl);
  _pf.LABEL(mklbl(lbl));
  _pf.AND();
}

void zu::postfix_writer::do_or_node(zu::or_node * const node, int lvl) {
  CHECK_TYPES(_compiler, _symtab, node);
  int lbl = ++_lbl;
  node->left()->accept(this, lvl);
  _pf.JNZ(mklbl(lbl));
  node->right()->accept(this, lvl);
  _pf.LABEL(mklbl(lbl));
  _pf.OR(); 
}

void zu::postfix_writer::do_not_node(zu::not_node * const node, int lvl) {
  CHECK_TYPES(_compiler, _symtab, node);
  node->argument()->accept(this, lvl);
  _pf.NOT();
}


void zu::postfix_writer::do_ret_node(zu::ret_node * const node, int lvl) {

}

void zu::postfix_writer::do_identity_node(zu::identity_node * const node, int lvl) {
  CHECK_TYPES(_compiler, _symtab, node);
  int lbl = ++_lbl;

  if(node->type()->name() == basic_type::TYPE_INT){
    _pf.INT((dynamic_cast<cdk::integer_node*>(node->argument()))->value());
  } 
  else if(node->type()->name() == basic_type::TYPE_DOUBLE){
    _pf.RODATA();
    _pf.ALIGN();
    _pf.LABEL(mklbl(lbl));
    _pf.DOUBLE((dynamic_cast<cdk::double_node*>(node->argument()))->value());
    _pf.TEXT();
    _pf.ADDR(mklbl(lbl));
    _pf.DLOAD();
  }
}

void zu::postfix_writer::do_function_call_node(zu::function_call_node * const node, int lvl){
  std::cout<<"calling "<<*node->identifier()<< std::endl;
  CHECK_TYPES(_compiler, _symtab, node);
  std::string name = '_'+*node->identifier();
  _pf.CALL(name);
  std::shared_ptr<zu::symbol> symbol = _symtab.find(name);
  if (symbol->type() != nullptr){
    if (symbol->type()->name() == basic_type::TYPE_DOUBLE){
      _pf.DPUSH();
    } else _pf.PUSH();
  }
}

void zu::postfix_writer::do_function_dec_node(zu::function_dec_node * const node, int lvl) {}
void zu::postfix_writer::do_address_node(zu::address_node * const node, int lvl) {}
void zu::postfix_writer::do_malloc_node(zu::malloc_node * const node, int lvl) {}
void zu::postfix_writer::do_index_node(zu::index_node * const node, int lvl) {}


void zu::postfix_writer::do_declaration_node(zu::declaration_node * const node, int lvl) {
  CHECK_TYPES(_compiler, _symtab, node);
  int lbl2 = ++_lbl;
  std::string id = *node->identifier()->name();
  std::shared_ptr<zu::symbol> symbol = _symtab.find(id);
  if (global) {
    if (node->rvalue() == nullptr){
      _pf.DATA();
      _pf.ALIGN();
      if (node->getPublic())
        _pf.GLOBAL(id, _pf.OBJ());
      _pf.LABEL(id);
      if(node->type()->name() == basic_type::TYPE_DOUBLE)
        _pf.DOUBLE(0);
      else if (node->type()->name() == basic_type::TYPE_DOUBLE)
        _pf.STR(nullptr);
      else
        _pf.CONST(0);
    } else {
      if(node->type()->name() == basic_type::TYPE_INT || node->type()->name() == basic_type::TYPE_POINTER){
        _pf.DATA();
        _pf.ALIGN();
        if (node->getPublic())
          _pf.GLOBAL(id, _pf.OBJ());
        _pf.LABEL(id);
        _pf.CONST((dynamic_cast<cdk::integer_node*>(node->rvalue()))->value());
      }
      else if(node->type()->name() == basic_type::TYPE_STRING){
        _pf.RODATA();
        _pf.ALIGN();
        _pf.LABEL(mklbl(lbl2));
        _pf.STR((dynamic_cast<cdk::string_node*>(node->rvalue()))->value()); //FIXME 
        _pf.DATA();
        _pf.ALIGN();
        if (node->getPublic())
          _pf.GLOBAL(id, _pf.OBJ());
        _pf.LABEL(id);
        _pf.ID(mklbl(lbl2));
      }
      else if(node->type()->name() == basic_type::TYPE_DOUBLE){
        _pf.DATA();
        _pf.ALIGN();
        if (node->getPublic())
          _pf.GLOBAL(id, _pf.OBJ());
        _pf.LABEL(id);
        dynamic_cast<cdk::double_node*>(node->rvalue())->accept(this, lvl);
      }
    }
  } else{
    if (node->rvalue() == nullptr){

    } else {
      if(node->type()->name() == basic_type::TYPE_INT || node->type()->name() == basic_type::TYPE_POINTER){
        dynamic_cast<cdk::integer_node*>(node->rvalue())->accept(this, lvl);
        _pf.LOCA(-retOffset-symbol->offset());
      }
      else if(node->type()->name() == basic_type::TYPE_STRING){
        dynamic_cast<cdk::string_node*>(node->rvalue())->accept(this,lvl); //FIXME 
        _pf.LOCA(-retOffset-symbol->offset());
      }
      else if(node->type()->name() == basic_type::TYPE_DOUBLE){
        dynamic_cast<cdk::double_node*>(node->rvalue())->accept(this,lvl);          
        _pf.LOCA(-retOffset-symbol->offset());
      } 
    }
  }

}


void zu::postfix_writer::do_block_node(zu::block_node * const node, int lvl) {
  if (node->declarationBlock() != nullptr) node->declarationBlock()->accept(this, lvl+4);
  if (node->instructionBlock() != nullptr) node->instructionBlock()->accept(this, lvl+4);
}


//---------------------------------------------------------------------------

void zu::postfix_writer::do_if_node(zu::if_node * const node, int lvl) {
  int lbl1;
  node->condition()->accept(this, lvl);
  _pf.JZ(mklbl(lbl1 = ++_lbl));
  node->block()->accept(this, lvl + 2);
  _pf.LABEL(mklbl(lbl1));
}

//---------------------------------------------------------------------------

void zu::postfix_writer::do_if_else_node(zu::if_else_node * const node, int lvl) {
  int lbl1, lbl2;
  node->condition()->accept(this, lvl);
  _pf.JZ(mklbl(lbl1 = ++_lbl));
  node->thenblock()->accept(this, lvl + 2);
  _pf.JMP(mklbl(lbl2 = ++_lbl));
  _pf.LABEL(mklbl(lbl1));
  node->elseblock()->accept(this, lvl + 2);
  _pf.LABEL(mklbl(lbl1 = lbl2));
}
